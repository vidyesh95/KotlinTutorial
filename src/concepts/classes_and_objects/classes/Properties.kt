package concepts.classes_and_objects.classes

/**
 * Properties : Properties in Kotlin classes can be declared either as mutable, using the var keyword, or as read-only,
 * using the val keyword.
 *
 * The full syntax for declaring a property is as follows:
 * var <propertyName>[: <PropertyType>] [= <property_initializer>]
 * [<getter>]
 * [<setter>]
 */

/**
 * Backing fields : Backing field is represented by 'field' keyword. It stores value of its own property.
 * The baking field is generated by kotlin internally only when it is used in code.
 */

/**
 * Backing property : Backing property helps prevent anyone from modifying property outside of class.
 */

/**
 * Compile time constants : If the value of a read-only property is known at compile time, mark it as compile time
 * constant using the const modifier. Such a property needs to fulfil the following requirements.
 * It must be a top-level property, or a member of an object declaration or a companion object.
 * It must be initialized with a value of type String or a primitive type.
 * It cannot be a custom getter.
 */

/**
 * Late initialized properties and variables :
 */
const val SUBSYSTEM_DEPRECATED: String = "This subsystem is deprecated"

lateinit var properties: Properties

fun main() {
    properties = Properties()
    properties.name = "Desktop"
    println(
        "Profit for ${properties.name} is ${properties.price - properties.cost} and is Expensive " +
                "${properties.isExpensive}"
    )
    properties.line = "Main line"
    println("$SUBSYSTEM_DEPRECATED on ${properties.line} and ${properties.lineIn}")
    println("Validity : ${properties.validity}")
}

class Properties {
    val cost: Float = 300f
    var price: Float = 700f
    lateinit var name: String
    val isExpensive: Boolean
        get() = cost > 1000f // No backing field generated

    val str: String = "" // No backing field generated

    val quality: String = "good"
        get() {
            println("Item is of $field quality") // backing field generated because it is used
            return field
        }


    var line: String = ""
        set(value) {
            field = value
            println("Properties line")
        }

    var lineIn: Int = 20
        private set

    init {
        this.lineIn = 100
    }

    private var _validity: Int = 0 //backing field: Holds actual age property data use inside class.
    var validity: Int // backing property: Exposed to outside world use outside class
        get() {
            return _validity
        }
        set(value) {
            _validity = value
        }
}


